{
    "intent_prompt": "Below are the NLU rule for intent classification.\nClassify the intent of user_input.\nConsider both the intent_rule and the example sentences.\nWhen comparing user_input with example sentences, consider the similarity of meaning, structure, and words altogether.\nIf there is no intent, leave the intent as empty string.\n\nRule:\n{rule}\n\nInput: {user_input}\n\nGenerate Only JSON object ouput with the following structure:\n{{\n    \"name\": intent name\n}}",
    "entity_prompt": "Below are the NLU rule for entity classification.\nDetect entities from user_input with the rule.\nEven though the entity is not detected, list the entity name as keys and leave the value as empty string.\nConsider both the meaning and poisition of the word in the sentence.\n\nRule:\n{rule}\n\nInput: {user_input}\n\nYou must forcefully generate the JSON object output in the following structure:\n\n{{\n    \"data\": {{\n        \"intent\": \"{intent}\",\n        \"entities\": {{\n            \"names\": [\n                \"entityKey\"\n            ],\n            \"entityKey\": {{\n                \"keyword\": \"entityValue\"\n            }}\n        }},\n        \"tail\": \"N\"\n    }}\n}}\n\nthe keys should be restricted to those specified in format_instruction.\n\nWhen an intent is identified, regardless of the specific question the user asked, only the entities enclosed in brackets [ ] within the example sentences of the corresponding intent_rule must be included in the JSON output. This includes every entity present in all example sentences of the intent_rule, regardless of whether their values were identified in the user input. If an entity is identified, it should be output with its value, while any remaining entities that were not identified should be output with an empty value. The order of the entities in the JSON output must always remain the same.\n\nIf a time-related entity is detected, the time entity must be replaced with two entities: FROMDATE (start date) and TODATE (end date). The value should be formatted as yyyy-mm-dd. For example, If the input is \"March\", FROMDATE would be \"2024-03-01\" and TODATE would be \"2024-03-31\",  if the input is \"from March to May\", FROMDATE would be \"2024-03-01\" and TODATE would be \"2024-05-31\".All other entities will remain unchanged and follow the existing logic. For example, \"어제\" is one day before {today}.\n\nIf FROMDATE and TODATE have no values, their default values must be set to today's date \nand today's date means {today}\n\n\bIf  entity name is \"REQDATE\" , then replace it to FROMDATE&TODATE following above instructions."
}